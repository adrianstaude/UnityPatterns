Creational Patterns(Patterns to initialize objects)

FACTORY PATTERN

Usage:
- Delegating the creation process of objects to an independent factory module

Pros:
- Less coupling since client orders without knowing details about the creation process
	-> Unified calls for objects with different components/behaviours/processes
- Encapsulation of creation process in a localized, single class

Cons:
- Adds code complexity since there can be several layers of abstraction
- Easily to be misinterpreted with abstract factory pattern


How-To Example:
- Create Interface (i.e. INPC) contracts to all objects that are created by factory
- Create Classes of Objects that are to be manufactured by the factory
- Create an enum that contains all the names of all the desired objects to be created
- Create factory class that instanciates and returns objects by using a switch with enum criteria
- Create Spawner Class that can order objects from factory
- Call Spawner Class via a Client Script

Example Use:
- Creating a Spawn System to Spawn different types of NPCs

Tips:
- Choose wisely between using an interface or an abstract